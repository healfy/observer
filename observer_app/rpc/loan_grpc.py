# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: loan.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.timestamp_pb2
import google.protobuf.duration_pb2
import google.api.annotations_pb2
import protoc_gen_swagger.options.annotations_pb2
import loan_pb2


class LoanServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Healthz(self, stream: 'grpclib.server.Stream[loan_pb2.HealthzRequest, loan_pb2.HealthzResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreateLoan(self, stream: 'grpclib.server.Stream[loan_pb2.LoanRequest, loan_pb2.LoanResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SetWallet(self, stream: 'grpclib.server.Stream[loan_pb2.WalletRequest, loan_pb2.WalletResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetLoan(self, stream: 'grpclib.server.Stream[loan_pb2.LoanRequest, loan_pb2.LoanResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetLoansList(self, stream: 'grpclib.server.Stream[loan_pb2.LoansListRequest, loan_pb2.LoansListResponse]') -> None:
        pass

    @abc.abstractmethod
    async def PaymentsList(self, stream: 'grpclib.server.Stream[loan_pb2.PaymentsListRequest, loan_pb2.PaymentsListResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetSellInfo(self, stream: 'grpclib.server.Stream[loan_pb2.SellInfoRequest, loan_pb2.SellInfoResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetCurrencies(self, stream: 'grpclib.server.Stream[loan_pb2.CurrenciesListRequest, loan_pb2.CurrenciesListResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CancelLoan(self, stream: 'grpclib.server.Stream[loan_pb2.LoanRequest, loan_pb2.CancelLoanResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetSettings(self, stream: 'grpclib.server.Stream[loan_pb2.SettingsRequest, loan_pb2.SettingsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ShowProfData(self, stream: 'grpclib.server.Stream[loan_pb2.ProfRequest, loan_pb2.ProfResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetRatesList(self, stream: 'grpclib.server.Stream[loan_pb2.RatesListRequest, loan_pb2.RatesListResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SetSold(self, stream: 'grpclib.server.Stream[loan_pb2.SetSoldRequest, loan_pb2.SetSoldResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/loan.LoanService/Healthz': grpclib.const.Handler(
                self.Healthz,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.HealthzRequest,
                loan_pb2.HealthzResponse,
            ),
            '/loan.LoanService/CreateLoan': grpclib.const.Handler(
                self.CreateLoan,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.LoanRequest,
                loan_pb2.LoanResponse,
            ),
            '/loan.LoanService/SetWallet': grpclib.const.Handler(
                self.SetWallet,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.WalletRequest,
                loan_pb2.WalletResponse,
            ),
            '/loan.LoanService/GetLoan': grpclib.const.Handler(
                self.GetLoan,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.LoanRequest,
                loan_pb2.LoanResponse,
            ),
            '/loan.LoanService/GetLoansList': grpclib.const.Handler(
                self.GetLoansList,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.LoansListRequest,
                loan_pb2.LoansListResponse,
            ),
            '/loan.LoanService/PaymentsList': grpclib.const.Handler(
                self.PaymentsList,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.PaymentsListRequest,
                loan_pb2.PaymentsListResponse,
            ),
            '/loan.LoanService/GetSellInfo': grpclib.const.Handler(
                self.GetSellInfo,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.SellInfoRequest,
                loan_pb2.SellInfoResponse,
            ),
            '/loan.LoanService/GetCurrencies': grpclib.const.Handler(
                self.GetCurrencies,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.CurrenciesListRequest,
                loan_pb2.CurrenciesListResponse,
            ),
            '/loan.LoanService/CancelLoan': grpclib.const.Handler(
                self.CancelLoan,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.LoanRequest,
                loan_pb2.CancelLoanResponse,
            ),
            '/loan.LoanService/GetSettings': grpclib.const.Handler(
                self.GetSettings,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.SettingsRequest,
                loan_pb2.SettingsResponse,
            ),
            '/loan.LoanService/ShowProfData': grpclib.const.Handler(
                self.ShowProfData,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.ProfRequest,
                loan_pb2.ProfResponse,
            ),
            '/loan.LoanService/GetRatesList': grpclib.const.Handler(
                self.GetRatesList,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.RatesListRequest,
                loan_pb2.RatesListResponse,
            ),
            '/loan.LoanService/SetSold': grpclib.const.Handler(
                self.SetSold,
                grpclib.const.Cardinality.UNARY_UNARY,
                loan_pb2.SetSoldRequest,
                loan_pb2.SetSoldResponse,
            ),
        }


class LoanServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Healthz = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/Healthz',
            loan_pb2.HealthzRequest,
            loan_pb2.HealthzResponse,
        )
        self.CreateLoan = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/CreateLoan',
            loan_pb2.LoanRequest,
            loan_pb2.LoanResponse,
        )
        self.SetWallet = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/SetWallet',
            loan_pb2.WalletRequest,
            loan_pb2.WalletResponse,
        )
        self.GetLoan = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/GetLoan',
            loan_pb2.LoanRequest,
            loan_pb2.LoanResponse,
        )
        self.GetLoansList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/GetLoansList',
            loan_pb2.LoansListRequest,
            loan_pb2.LoansListResponse,
        )
        self.PaymentsList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/PaymentsList',
            loan_pb2.PaymentsListRequest,
            loan_pb2.PaymentsListResponse,
        )
        self.GetSellInfo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/GetSellInfo',
            loan_pb2.SellInfoRequest,
            loan_pb2.SellInfoResponse,
        )
        self.GetCurrencies = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/GetCurrencies',
            loan_pb2.CurrenciesListRequest,
            loan_pb2.CurrenciesListResponse,
        )
        self.CancelLoan = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/CancelLoan',
            loan_pb2.LoanRequest,
            loan_pb2.CancelLoanResponse,
        )
        self.GetSettings = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/GetSettings',
            loan_pb2.SettingsRequest,
            loan_pb2.SettingsResponse,
        )
        self.ShowProfData = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/ShowProfData',
            loan_pb2.ProfRequest,
            loan_pb2.ProfResponse,
        )
        self.GetRatesList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/GetRatesList',
            loan_pb2.RatesListRequest,
            loan_pb2.RatesListResponse,
        )
        self.SetSold = grpclib.client.UnaryUnaryMethod(
            channel,
            '/loan.LoanService/SetSold',
            loan_pb2.SetSoldRequest,
            loan_pb2.SetSoldResponse,
        )
