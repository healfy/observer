# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: gasstation.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.timestamp_pb2
import google.api.annotations_pb2
import protoc_gen_swagger.options.annotations_pb2
import gasstation_pb2


class GasStationServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Healthz(self, stream: 'grpclib.server.Stream[gasstation_pb2.HealthzRequest, gasstation_pb2.HealthzResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[gasstation_pb2.GasRequest, gasstation_pb2.GasResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/gasStation.GasStationService/Healthz': grpclib.const.Handler(
                self.Healthz,
                grpclib.const.Cardinality.UNARY_UNARY,
                gasstation_pb2.HealthzRequest,
                gasstation_pb2.HealthzResponse,
            ),
            '/gasStation.GasStationService/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                gasstation_pb2.GasRequest,
                gasstation_pb2.GasResponse,
            ),
        }


class GasStationServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Healthz = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gasStation.GasStationService/Healthz',
            gasstation_pb2.HealthzRequest,
            gasstation_pb2.HealthzResponse,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gasStation.GasStationService/Get',
            gasstation_pb2.GasRequest,
            gasstation_pb2.GasResponse,
        )
